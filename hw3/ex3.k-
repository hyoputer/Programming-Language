let proc leaf(x) = {val:=x, l:=unit, r:=unit} in
let proc makeLtree(x, t) = {val:=x, l:=t, r:=unit} in
let proc makeRtree(x, t) = {val:=x, l:=unit, r:=t} in
let proc makeTree(x, t1, t2) = {val:=x, l:=t1, r:=t2} in
let proc isEmpty(t) = if (t = unit) then true else false in
let proc rTree(t) = t.r in
let proc lTree(t) = t.l in
let proc nodeVal(t) = t.val in
let proc dft(t) = (
    if (isEmpty(t)) then unit
    else (
        write(nodeVal(t)); 
        dft(lTree(t)); 
        dft(rTree(t))
    )
) in
let proc limitdft(t, n) = (
    if (isEmpty(t)) then false
    else (
        if (n = 0) then (
            write nodeVal(t); 
            true
        )
        else (
            let b1 = limitdft(lTree(t), n - 1) in
            let b2 = limitdft(rTree(t), n - 1) in
            if (b1) then true else b2
        )
    )
) in
let proc bft(t) = (
    let b = true in
    let n = 0 in
    while (b) do (
        b := limitdft(t, n);
        n := n + 1;
    )
) in
2017